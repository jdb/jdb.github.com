
Hello,


Le but de cet article est de proposer une méthode un peu rationnelle
d'évaluation de projet externe. Ensuite, je présente 6 technologies
que j'ai repérées depuis quelques mois.

Plusieurs technologies disponibles ont quelques longueurs
d'avances. Nous pouvons éviter des efforts et des erreurs lorsque la
technologie n'est pas notre coeur de métier, et nous pouvons livrer
des produits innovants plus rapidement qu'en prenant en charge le
développement en interne. Ces technologies sont comme de la matière
première, qu'il faut extraire, intégrer et distribuer. Pour garder une
expertise technique cohérente, je pense pas que l'on puisse assumer
l'ensemble de la chaine logicielle.

Si l'on considère le positionnement de Anevia comme un constructeur,
et non comme un éditeur de logiciel, nos clients ne nous demande pas
d'être les créateurs des briques logicielles, par contre, ils nous
demandent d'en faire des serveurs exploitable de leur réseau, de les
accompagner dans leur croissance et d'en faire le support. 




Méthodes d'évaluation
=====================

*Des technologies sortent tout les trois mois, comment repérer les
projets sérieux?*


The first of those is vision. There are, he says, plenty of
visionaries out there, even if many of them do not see as far as they
might think. We need those visionaries - just following others is, as
was described above, not the way to be successful. Our community needs
people who are not stuck doing things the way they have always been
done.

The second requirement is competence - the ability to actually
implement the visions. One of the nice things about the open source
world is that competence is very much on display. We can (relatively)
easily measure the competence of others, and our own competence as
well. We are very free to learn from each other and quickly improve
our competence.

Then there's commitment. Without commitment, developers will not see
the task through to the end. And, just as importantly, users need to
see that commitment. They need to know that the developers will be
around, that they are serious, that they will respond to bugs, and
that they will continue to carry the code forward. That said, open
source makes users less dependent on the commitment of others. When a
proprietary software vendor abandons a body of code, there is nothing
the users can do about it. Open source software can be picked up and
carried forward by others.

Finally, there is the matter of focus. Without focus, we will lose;
there are simply too many distractions which can get in the way.


Plusieurs indicateurs peuvent être évalués:

#. la technologie est elle adapté a notre besoins? Quelle est la licence?

#. la technologie est elle mature, documentée, déployée? si la
   technologie est complexe, existe t'il une communauté professionelle
   capable de fournir des prestations de support ou de formation?

#. la gestion du projet est elle transparente?

Une gestion transparente est souvent un gage de l'indépendance du
projet, et d'un fonctionnement basé sur le mérite. Pour répondre à ces
questions, un projet open source présente des éléments tangibles.

#. La *gestion de sources* et le *suivi de bug* sont publics et
   fournissent la fréquence, le volume et la diversité des auteurs des
   contributions,

#. La *documentation* donne vite une idée des priorités et de
   l'expérience du projet. Les *tutoriaux* permettent de mesurer si la
   techno est pratique pour nous, bien conçue,

#. La *régularité des releases* et la *couverture des tests*
   permettent de mesurer leur organisation,

#. Sur les *mailings lists* ou sur les *salons IRC*, on évalue la
   disponibilité et la pertinence des interlocuteurs.

#. Les technos importantes sont régulièrement couvertes par des
   conférences, ou par des articles dans des revues de référence come
   lwn, ou arstechnica (restons sceptique sur LinuxMag et Slashdot!).

#. Les blogs de nombreux hackers peuvent démontrer un enthousiasme
   super productif et les innovation de ces produits.

L'exemple de Mac OS X est parlant, les créateurs d'un système
d'exploitation ont remplacé une brique centrale de leur technologie -
le noyau - par un système d'exploitation à la licence BSD très
libérale. Personne ne considère pour autant Apple comme un simple
intégrateur, l'entrerprise est très profitable a l'heure actuelle et
leur oeur de métier qui reste secrètement gardée, se place par dessus
le projet FreeBSD qu'il ont décidé d'utiliser.




Collaboration externe
=====================

Il faudra évaluer et faire confiance à des communautés externes à
l'entreprise sur lesquelles nous aurons peu de contrôle et peu de
liens contractuelles, a priori. Peu de ces projets proposent
directement support et formation.

C'est toujours plus simple de gérer un problème de A à Z dans la même
équipe lorsque l'on en a la capacité. Pour que ça fonctionne avec des
communautés distribuées dans plusieurs pays, il faudra s'adapter à
leur organisation et à leur méthode de communication.

Prendre l'initiative de s'adresser a un média public comme des mailing
listes ou un salon IRC demande un peu d'expérience.  Arriver à
synthétiser le contexte dans une forme qui facilite la réponse prend
du temps, requiert de l'autonomie et un peu d'humilité. C'est une
question de gout aussi.

Ces modalités de communication peuvent laisser sceptique mais
plusieurs expériences professionnelles en travaillant au jour le jour
avec des specialistes de Postgresql, de MySQL ou de la virtualisation,
par exemple m'ont convaincu de leur efficacité même si ce sont des
méthodes différentes des méthodes de communication professionelles
traditionelles.


Technologies "on my radar"
==========================

Je vous demande encore quelques minutes d'attention pour vous donner 4
exemples de technos qui sont sur mon radar depuis quelques mois. J'ai
mis quelque liens quand ils pointaient vers des pages courtes et
claires.


Gstreamer
---------

De multiples serveurs multimédia doivent être développées, des
solutions sur étagère sont elles assez flexibles pour répondre a nos
besoins?

Gstreamer est un framework multimédia LGPL à base de plugins, initiée
en 2003 par une entreprise de Barcelone dont le coeur de métier est de
vendre des services de streaming hostés sur leur propre datacenter
pour les sites web des chaines de télé espagnole. Leur streaming
server est open source et leur architecture logicielle est costaude.

Leur plateforme de CDN et transcodage est fait bonne impression:
http://bit.ly/12x0m.

La créativité des hackers autour de ces outils est un signe de la
flexibilité et de l'adoption du framework: bit.ly/1aZWfv .

Gstreamer fait aussi partie de l'installation minimale des
distribution linux depuis plusieurs années: Debian, Ubuntu, Fedora,
Red Hat, c'est à dire quelque millions d'utilisateurs et pas mal
d'entreprises.  Gstreamer est la pile multimedia des smartphones Nokia
(maemo.nokia.com). Il gère plein de formats et codec (h264, aac,
flash, Apple streaming, ogg etc), et fournit des tutoriels de
developpement de plugin pour la plupart des langages. Cet été, des
étudiants ont bossé, rémunéré par Google, pour faire un plugin très
proche d'un circular buffer.


Pacemaker
---------

Projet de failover initié avec le projet Heartbeat il y a plus de six
ans, et maintenu par Novell. Pacemaker a plusieurs moyens pour
detecter et décider qu'un noeud ne répond plus. Un script aux
interfaces claires sont appelés pour effectuer la migration du service
vers un autre noeud.

Pacemaker est fait partie de l'offre server de Red Hat, Ubuntu et
Suse.


LLVM
----

Compilateur C/C++ entre trois et quatre fois plus rapide que gcc sous
une license équivalente à la license BSD. Voici des schéma qui
résument LLVM. Sur arstechnica.com: bit.ly/pHagp . LLVM
produit des binaires plus petit, et plus rapide. LLVM est soutenu par
Apple depuis 2005 qui le supporte officiellement sur la dernière
version de MacOS.

Le projet est aussi soutenu par Google qui travaille dessus pour
multiplier par 5 les performances de Python. La prochaine version
majeure de perl comportera un compilateur *just in time* basé sur
LLVM.


AMQP
----

Protocole de messagerie fiable de middleware i.e. de communication
entre serveurs, un peu comme AIPC ou Corba. Un message ne peux pas
être perdu, si le destinataire reboote alors qu'un relai de message
lui délivre un message, il sera ré-émiis. Si le relai de message
reboote avant la ré-emission, selon la configuration, si le message a
été persisté sur disque, il sera ré-émis après le redémarrage. 

Par exemple, AMQP assure que des message de configuration de serveurs
est bien livré a l'ensemble des VoDs, même si ceux si sont éteints et
allumés plus tards.

Développé pour JP Morgan Chase en 2005 pour des communications fiables
et performantes au sein des salles de marché, adopté par des gros
vendeurs comme par des startups. Les implémentations sont disponibles
sous license LGPL dans la plupart des langages. Red Hat, en
particulier, distribue supporte officiellement ce projet dans leur
offre entreprise.

Thrift
------

Thrift propose un format simple de contenu de message et de fonctions
appelables a travers le réseau et génère les stubs pour Java, C++,
Python, Ruby etc. AMQP s'occupait de livraison de messages, Thrift
s'occupe du format des messages et rends les messages intéropérables
entre différents languages de programmation. 

Si l'on prend l'example, des alarmes et des logs, il est possible de
transferer des listes et des dictionnaires de messages structurés
entre la *liblog* ecrit en C et un *logd* écrit en python.

AMQP et Thrift constituent deux layers qu'implémentent AIPC sans les
efforts de maintenance.


Systèmes de fichiers distribués rapides
---------------------------------------

NFS est assez lent lorsque l'on augmente le nombre de clients et n'est
pas redondé. Plusieurs projets sont documentés et permettent de créer
des partages réseau redondés de manière transparente sur plusieurs
serveurs et rendent possible des utilisations intensives des disques
sans "single point of failure". Des entreprises développent ces
technologies au sein du noyau linux standard pour pouvoir concurrencer
des baies EMC. Voir sur kernelnewbies.org: bit.ly/1tW0VO .


Conclusion
==========

Des projets open source avancés offrent les fonctionnalités que
nous pouvons intégrer, vendre et supporter. L'adéquation d'un projet
avec notre modèle d'affaire peut s'évaluer de manière rationnelle.

