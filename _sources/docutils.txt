

=======
 title
=======

Presentation
============

There are hooks available at several levels of the documentation stack
to help us build our specific helpers.

* the **restructured text** has *directives* [#]_ and *roles* [#]_

.. [#] http://docutils.sourceforge.net/docs/ref/rst/directives.html and
       http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#directives

.. [#] http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#interpreted-text
       and http://docutils.sourceforge.net/docs/ref/rst/roles.html

* the **docutils** [#]_ can associate code to implement directives
  [#]_ and roles [#]_ to manipulate the doctreee [#]_. The doctree
  is the parsed representation of a rst. It is the step after the rst
  and before the html or latex.

.. [#] http://docs.python.org/library/docutils and also docutils.parsers.rst, 
       docutils.nodes

.. [#] http://docutils.sourceforge.net/docs/howto/rst-directives.html

.. [#] http://docutils.sourceforge.net/docs/howto/rst-roles.html

.. [#] http://docutils.sourceforge.net/docs/ref/doctree.html


* via **Sphinx**, there is an infrastructure for extensions integrated
  in the build process [#]_. An even better example can be read in the
  sources of the todo extensions of Sphinx version 0.6 (``locate
  todo.py | grep 0.6``): a docutils *Directive* class is used which
  makes it possible to check the consistency of the input and display
  clear report of the errors. If the extension only stick to standard
  docutils nodes, there is no need for specific writer visitor functions

.. [#] http://sphinx.pocoo.org/extensions.html


Extensions for protocol commands and options
============================================

A list of the ALLP protocol commands, their parameters and their
synopsis of their use and optionality is an efficient way to get an
overview of the protocol. Also these helpers are meant to create links
and backlinks between the command and the parameter they uses.

The new restructured text directive *command* has one argument, the
parameter name and offers a form with fields for mandatory and
optional parameters and a brief explanation. Example:

::

   .. command:: setup
      :mandatory: file
      :optional: nptstart,scale

      Sets up a record a or a streaming
	 
is rendered as 

::

    Setup	

    .. hlist::
       * mandatory parameters: file
       * optional parameters: nptstart, scale

    Sets up a record a or streaming


This directive can be completely implemented at the reading phase
with standard docutils body elements (a text node and a list node)
iff this node can be marked for processing at writing phase for the
building of the table, there is no need for custom nodes and
visitor functions for the writing phase.


The directive *parameter* has one argument, the parameter name, and a
content which is short description of the value type, the
constraints on the value and the impact of the parameter. The
resulting doctree node should list the commands using this
parameter. Example:

::

  .. parameter:: file
     :type: A pathname (a string)
	:default:

     The pathname of the presentation on the disk.

This should be rendered as :

::

  file
  ----

  A pathname (a string). The pathname of the presentation on the
  disk. Used by setup, delete.

The *used by* is automatically added. This directive need a
Directive instance inserting a node in the form which which will
lack the link toward the target. An event handler must be connected
to the *doctree-resolved* event to resolve the target toward the
commands using it.

It is also possible to make one directive called *allp* which takes
a *:class:* option which can be either a *command* or a *parameter*.

Yet another solution is simply to tag the *:class:command* or the
*:class:parameter* option in a paragraph to lay the information
needed to build the "Used by". 

The directive *commandtable* (no arguments, no options and no
content) inserts a table whose columns headers are the command name
and whose lines headers are the parameter names. The intersection
is a symbol 'm', 'o' or empty which denotes whether a command uses
a parameter or not and whether the parameter is mandatory or
optional. Example:

======== ======== ========
	 setup    filelist
======== ======== ========
drive    m        o
file     m
nptstart o
scale    o
======== ======== ========

The directive needs a Directive instance inserting a placeholder
at the reading pahse which gets filled  by a handler triggered by the
*doctree-resolved* event. There is no need for visitor functions if
the resulting nodes are standard docutils nodes.

It is also possible to make not a latex, nor an html builder but a
which outputs the table which is then copied and pasted into the
document.

Make sure every parameter has an short description, a type,
restrictions and example. Make sure every optional parameter has a
default.


.. Write two xslt bridging .mm and doctrees, then manipulate the
   mindmap to reorganize the table of contents via and freemind emacs
   dbus, etc...

.. Directive pour freemind (right, or left)


Extensions for perspectives without breaking the flow
=====================================================


In addition to todo which rocks also need the directive:

 * to be determined, 

 * rationale, 

 * convention,

 * point of configuration,

 * limitations, 

 * security risk, 

 * road map,

 * warning,

 * stressing a specific point,

 * define (coming to terms, definition)

 * tests are a complicated beast. When talking from a high level view
   on a subject, I want to specify more precisely a paragraph which is
   hidden in the document but appears in an appendix. I would like to
   query the doc only for the tests, or only for the todos. I would
   like to set tests numbers from the command line.

